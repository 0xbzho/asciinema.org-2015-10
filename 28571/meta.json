{"ID":28571,"Author":{"Name":"chrisciborowski","ID":0,"FullName":"","Gravatar":"6c5ffe8fd8ec5fc64081d6386d067cf9"},"Title":"Demo! Scale-out Docker Platform on Amazon Web Services EC2","Description":"\u003cdiv class=\"content\"\u003e\u003cp\u003eHere is a quick ascii demo of a Docker scale-out Docker platform running on AWS.  This cluster uses only EC2 resources, specifically three compute instances and one elastic load balancing instance.  The sample app utilizes Redis as a backing store and a frontend Python app.  The tooling in the platform includes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA frontend Amazon Elastic Load Balancer configuration pointing to...\u003c/li\u003e\n\u003cli\u003eA single NGINX instance performing URI filtering,  routing traffic matching \u0026#34;/nwi\u0026#34; to three Swarm nodes\u003c/li\u003e\n\u003cli\u003eA three node Docker Swarm cluster\u003c/li\u003e\n\u003cli\u003eA three node Consul cluster (for Swarm and service registration)\u003c/li\u003e\n\u003cli\u003eHAproxy reverse proxy on every node \u003c/li\u003e\n\u003cli\u003eRegistrator for automatic (de)registration of instantiated Docker containers\u003c/li\u003e\n\u003cli\u003eConsul-template for creating HAproxy configuration files on the fly\u003c/li\u003e\n\u003cli\u003eAll services instantiated as containers\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA production implementation should have more nodes (at least 5) but shows the functionality to provide a scalable Docker platform, which does not require the additional complexity and overhead of overlay networking.  This architecture supports not only robust networking models (like BGP) but also allows per-service launch HAproxy, consul-template, and a sidecar container for configuration data (stateless services)\u003c/p\u003e\n\u003c/div\u003e","Time":"2015-10-22T17:41:08Z","Tags":["OS X","zsh","xterm-256color"]}